"## plug-vim{{{
"--------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
"Plug 'LoKaltog/powerline', {'rtp':'powerline/bindings/vim/'}
"Plug 'Valloric/YouCompleteMe'
"Plug 'Yggdroot/indentLine'
"Plug 'flazz/vim-colorschemes'
"Plug 'hjc0720/qssvim'
"Plug 'jiangmiao/auto-pairs'
"Plug 'junegunn/vim-peekaboo'
"Plug 'peterhoeg/vim-qml'
"Plug 'vim-autoformat/vim-autoformat'
"Plug 'vim-scripts/DoxygenTooIkit.vim'
"Plug 'xolox/vim-colorscheme-switcher'
"Plug 'xolox/vim-misc'
"vim-surround
"~/.vim/plugged/vim-surround/README.markdown
"知道来源：learnvim.irian.to/basic
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'luochen1990/rainbow'
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-surround'
"Plug 'sainnhe/sonokai'
Plug 'tribela/vim-transparent'
"Plug 'bfrg/vim-cpp-modern'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
"Plug 'xolox/vim-colorscheme-switcher'
"Plug 'vim-scripts/DoxygenToolkit.vim'
"Plug 'OmniCppComplete'
"Plug 'luchermitte/lh-cpp'
"Plug 'honza/vim-snippets'
"Plug 'godlygeek/csapprox'
"Plug 'kien/ctrlp.vim'
"Plug 'yuttie/comfortable-motion.vim'
"Plug 'vim-scripts/YankRing.vim'
"Plug 'kshenoy/vim-signature'
"Plug 'mhinz/vim-startify'
"Plug 'vim-scripts/bufexplorer.zip'
call plug#end()
"}}}

"## option : set {{{
"--------------------------------------------------------------------------------

"colorscheme murphy
" 使用vimscript进行插入的时候，tab会成为8个空格的，所以不要开启的好
               " 自动跟紧上一行的缩进
" autoload-plugin
"packloadall          " 加载所有插件
"silent! helptags ALL " 为所有插件加载帮助文档
"noh                     "清楚高亮显示
filetype plugin on
filetype indent on   " 根据文件类型自动缩进
filetype on
"hi Normal cterm=none ctermfg=green ctermbg=0
"hi Normal cterm=none ctermfg=100 ctermbg=0
"hi Normal cterm=none ctermfg=169 ctermbg=0
"hi Normal cterm=none ctermfg=208 ctermbg=0
"hi Normal cterm=none ctermfg=25 ctermbg=0
"hi Normal ctermfg=252 ctermbg=none
"hi User2 guifg=Red  guibg=Cyan
"hi User1 guifg=Blue guibg=DarkRed
"hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15
"hightlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
"hi Normal ctermfg=252 ctermbg=none
"set runtimepath=~/vimfiles/autoload,~/vimfiles/plugged,$VIMRUNTIME
"set showtabline=1
"set guioptions-=T
"set guioptions-=m
"set guifont=Lucida_Console:h18
"set guifont=Courier_New:b:h16
"set completeopt=menu,menuone,noselect
"set tags+=D:/Qt/6.5.0/Src/tags
"set tags+=D:/Qt/6.5.0/mingw_64/include/tags
"set updatetime=300
"set cmdheight=2
"set nowritebackup
"set hidden
"set encoding=UTF-8
" set complete+=k
" set iskeyword+=.,(
"set iskeyword+=.
"set tags+=D:\Qt\Tools\mingw1120_64\lib\gcc\x86_64-w64-mingw32\11.2.0\tags
"set tags=tags;     "在父目录中递归查找 tags 文件
"set showcmd         " 在右下角显示输入的命令
"set foldcolumn=5
"set statusline=[%n]%1*%F%=%0*%2*%l,%c\ %p%%%0*\|ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\    
"set statusline=[%n]\ %#HIComment%F%=\ \|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\     " 没有效果
"set statusline=[%n]\ %f%m%r%h\ \|\ \ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\
"set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurrentDir()}\ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\
"set textwidth=80       " 限制一行的长度，不错的功能
"set backspace=2         " 修正终端上的退格键 Backspace 的行为
"set softtabstop=4
"set relativenumber     "相对行号
"set paste                      " 开启这个选项，复制进来的文本的换行符就不会乱
"set cindent                        " C 语言的缩进
        ""setlocal nomodifiable
        "setlocal nobuflisted
        "setlocal noswapfile
        "setlocal bufhidden=hide
        "setlocal buftype=nofile
        "setlocal noreadonly
set runtimepath+="D:\\Programs\\Python\\Python311\python311.dll"
set guifont=AnonymicePro_Nerd_Font_Mono:h16
set dictionary+=$linp/vim/dict/c.txt
set noswapfile
set nobackup
set noundofile
set virtualedit=all "详细信息去看帮助文档
set tags+=D:/Qt/Tools/mingw1120_64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/tags,$lin/libraries/jsoncpp/tags,$lin/libraries/include/lin/tags
set scrolloff=5     " vertical scrolling the cursor distance with bottom
set t_Co=256        " 开启 256 色
set fileencodings=utf-8,gbk
set foldlevel=3
set foldmethod=marker
set laststatus=2
set backspace=3
set wrap
set sidescroll=10       " 自动的滚动文本，当移动的文本没有显示时
set shiftwidth=4        " 用于自动缩进的空格数量
set expandtab           " 将制表符 Tab 展开为空格，这对于 Python 尤其有用
set tabstop=4           " tab 的空格数量
set hlsearch            "高亮‘/’搜索到的匹配项
set  number              " 显示行号
set mouse=a          " 开启鼠标，默认是不能使用鼠标的
set autoindent " 开启自动缩进
set syntax=on       " 开启语法高亮
"}}} option

"## mapping {{{
"--------------------------------------------------------------------------------
nnoremap <leader>x a/*-*/<esc>
inoremap <F8> <C-R>=ListMonths()<CR>
xnoremap <Leader>g :Goyo<CR>
inoremap <silent><expr> <Tab> coc#pum#confirm()
" :help map.txt
"inoremap<F4> <C-O>:popup File<CR>
xnoremap ga <Plug>(EasyAlign)
vnoremap <Enter> <Plug>(EasyAlign)
nnoremap gs :call me#SwitchToSource()<CR>
nnoremap ga <Plug>(EasyAlign)
noremap cx Vy
"noremap K :
"noremap <c-v> "+p
"nnoremap <c-k> :
nnoremap <Space> <C-d>
nnoremap <M-w> <C-w>
nnoremap <LEADER>z ZZ
nnoremap <LEADER>v :Goyo<CR>
nnoremap <LEADER>t <c-w>T
nnoremap <LEADER>sc :!start cmd<CR>
nnoremap <LEADER>o  :tabnew $MYVIMRC<CR>
"nnoremap <LEADER>mv 
nnoremap <LEADER>ms :set foldmethod=syntax<CR>
nnoremap <LEADER>mr :set nornu<CR>
nnoremap <LEADER>mo :browse oldfiles<CR>
"nnoremap <LEADER>mm 
nnoremap <LEADER>md :tabnew $HOME/vimfiles/pack/MyVim<CR>
nnoremap <LEADER>i  :call me#CreateImplement()<CR>
nnoremap <LEADER>e  :call me#GenerateDefine()<CR>
nnoremap <LEADER>cd :cd ~/code/cpp/basic<CR>
"nnoremap <LEADER> <Plug>(easymotion-prefix)
nnoremap <F9> :Tagbar<CR>
nnoremap <F5> :w<CR>
nnoremap <F3> :tabnew<CR>
nnoremap <F2> :Vexplore<CR>
"nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F10> :wqa<CR>
nnoremap <c-q> :
"nnoremap <c-v> <c-q> "与终端中的快捷键冲突
nnoremap <C-n> :bel vnew<cr>
nnoremap <F6> :call me#Compile()<CR>
nnoremap <C-b> :call me#Compile()<CR>
map <Leader> <Plug>(easymotion-prefix)
"nnoremap <c-s> :w<cr>
"inoremap <c-s> <esc>:w<cr>
"inoremap <C-L> <C-X><C-L>
"inoremap <C-D> <C-X><C-D>
"inoremap <C-F> <C-X><C-F>
"inoremap <C-]> <C-X><C-]>
nnoremap <c-j> <Plug>(easymotion-w)
nnoremap <c-k> <Plug>(easymotion-b)
nnoremap <c-;> <Plug>(easymotion-bd-f)
inoremap <c-;> <Esc><Plug>(easymotion-bd-f)
inoremap <c-q> <Esc>:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <C-b> <Esc>:me#Compile()<CR>
"nnoremap <LEADER>mn :set nu<CR>
"nnoremap <LEADER>md :tabnew $HOME/AppData/Local/nvim/pack/plugins/start/me<CR>
"nnoremap <F8> :!start C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -c "pwd"<CR>
"nnoremap <F7>
"nnoremap <F6> :call me#Compile()<CR>
"nnoremap <F5> :!start C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -noe -c "&{Import-Module """C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"""; Enter-VsDevShell 09c32363}"<CR>
"nnoremap <F4> :wa<CR>
"inoremap <S-Alt> <Esc>:w!<cr>
"inoremap <F4> <C-R>=me#MySnippets()<CR>
nnoremap <LEADER>d :call append(line('.'), strftime('%c'))<CR>
"nnoremap ,f :!start powershell
"noremap ,f :call CompileRun()<CR>
"2024年01月13日
"使用 window id 跳转，会出导致 cpp 文件被删除！需要改进！
"通过命令行将文件路径传给另一个程序，它负责编译并运行这个文件。
"这个程序就用 cpp 与 qt来写。
"1.通过命令行调用；
"2.在命令行中执行命令并得到结果；
"3.将结果显示在程序中。

"不好！那就这样！用一个接受文件路径的脚本来完成编译运行的操作。
"1. 设置一个变量
"2. 使用变量和脚本文件来完成编译运行。

"利用 powershell 的启动参数来简化自己的操作
"powershell -help

"colorscheme zaitabsu
"colorscheme retrobox
colorscheme sorbet


" gaip=
"cd $lin/cpp/basic

" ~/.vim/pack/plugins/start/vim-easy-align/doc
" vipga=     使用等号进行对齐
" v     visual-select
" i     inner
" p     Paragraph
" ga    开始 EasyAlign 命令
" =     依据等号进行对齐
" }}} map

"## autocmd : au {{{
"--------------------------------------------------------------------------------
au! BufNewFile *.cpp call me#CppTmp()
"autocmd InsertLeave  * :set imi=1
"autocmd InsertEnter * :set imi=2
"autocmd event filetype command
"autocmd BufNewFile *.cpp || *.hpp call InsertCppHeadInfo()
"autocmd VimEnter *.md  TagbarToggle
"autocmd BufWritePost *.c *.h silent! !ctags -R &  "保存c文件时重新生成标签
"au InsertLeave * hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15
"au InsertEnter * call InsertStatuslineColor(v:insertmode)
" }}} autocmd

"## variable : let {{{
"--------------------------------------------------------------------------------
"let g:lightline.colorscheme = 'wombat'
"let g:compilerun_wind_id = 0
"let filename = expand('%')

let mapleader = "\\"
let g:limelight_priority = -1
let g:limelight_eop = '\ze\n^\s'
let g:limelight_bop = '^\s'
let g:limelight_paragraph_span = 1
let g:limelight_default_coefficient = 0.7
let g:limelight_conceal_guifg = '#777777'
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_ctermfg = 'gray'
let $mycfg=~/.vim/pack/MyVim/start
let g:rainbow_active=1
"}}} variable

"## function : func {{{
"--------------------------------------------------------------------------------
""" C++ 插入预防宏
function! Ifndef()
    let name = input("请输入宏名：")
    if empty(name) == 1
        return
    endif
        let macro_name = toupper(name) .. "_H_"
        let content = [
                    \ "##ifndef " .. macro_name, 
                    \ "##define " .. macro_name, 
                    \]
        call append(line("0"), content)
        call append(line("$"), "##endif // " .. macro_name)
endfunction

""" 查看中文月份
func! ListMonths()
    "call complete(col('.'), ['January', 'February', 'March',
                "\ 'April', 'May', 'June', 'July', 'August', 'September',
                "\ 'October', 'November', 'December'])
    let cpp_complete = [
                \ "std::cout << << std::endl;", 
                \ "int main() { f(); }", 
                \]
    call complete(col('.'), cpp_complete)
    "实现光标的移动，在补全使用特殊的参数，在选择后，解析结果，然后移动光标
    return ''
endfunc
" 此函数用于消除文本替换后的空格
"func Eatchar(pat)
"    let c = nr2char(getchar(0))
"    return (c =~ a:pat) ? '' : c
"endfunc

" Deprecation: see $mypack\MyVim\start\me\me.vim
"function! CompileRun()
    "let cppfile_winid = win_getid()
    "execute "write"
    "let curfilename = expand("%")
    "echo g:compilerun_wind_id
    "if !g:compilerun_wind_id
        "execute "new " .. "Compile Run"
        "echo "已创建新的结果缓冲！"
        ""execute "vertical resize 50"
        "let g:compilerun_wind_id = bufwinid("Compile Run")
    "endif
    "call win_gotoid(g:compilerun_wind_id)
    "execute "normal ggVGx"
    "execute "r!g++ " .. l:curfilename .. " -std=c++20 && a.exe"
    "call win_gotoid(l:cppfile_winid)
"endfunction
"}}} function

"## menu {{{
" --------------------------------------------------------------------------------
" insert mode menu
" inoremenu File.&Save :w<CR>

" normal mode menu
" menu File.&Save :w<CR>
           
"amenu File.Save <C-O>:w<CR>
"amenu File.Exit <C-O>:q<CR>
"imenu File.Big\ Changes.Delete\ All\ Spaces :%s/[ ^I]//g<CR> "插入模式不能使用

"" tool bar

" run program
"amenu ToolBar.BuiltIn21 :call me#Compile()<CR>
amenu ToolBar.BuiltIn21 :call me#Compile()<CR>
amenu ToolBar.BuiltIn22 :!start subl.exe %<CR>
" }}} menu

"## abbreviations {{{
" --------------------------------------------------------------------------------

iab ce std::cout <<  << std::endl;<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left> 
iab ff for(int i = 0; i < n; ++i)<CR>{<CR>}
 
"iabbr <silent> ,, -><C-R>=Eatchar('\s')<CR>
"}}} abbr

"## python {{{
"--------------------------------------------------------------------------------
if &filetype == "python"
    set foldmethod=indent
endif
"}}} python

"## limelight {{{
"----------------------------------------
" 问题: unsupported color scheme. g:limelight_conceal_ctermfg required
" 解决:https://github.com/junegunn/limelight.vim#options
" Color name (:help cterm-colors) or ANSI code

" Color name (:help gui-colors) or RGB color

" Default: 0.5

" Number of preceding/following paragraphs to include (default: 0)

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch

" Goyo
"----------------------------------------
"Goyo与Limelight聚和
"}}}

"## my plugin {{{
"--------------------------------------------------------------------------------
call linlin_popup_menu#AddMenuItem("查看标签行", 'execute :tabs')
call linlin_popup_menu#AddMenuItem("Goyo", "execute Goyo")
"call linlin_popup_menu#AddMenuItem("复制", 'execute normal gv"+y')
"存在popup窗口不能关闭的问题
call linlin_popup_menu#AddMenuItem("粘贴", 'execute normal "+p')
call linlin_popup_menu#AddMenuItem("进入 C++ basic 目录", 'execute cd ~/code/cpp/basic')
call linlin_popup_menu#AddMenuItem("开启换行", 'execute set wrap')
call linlin_popup_menu#AddMenuItem("编辑我的插件", 'execute tabnew ~/vimfiles/pack/MyVim/start')
"call linlin_popup_menu#AddMenuItem("打开我的插件目录", 'execute cd ~/code/cpp/basic')
"查看当前信息：
"1. pwd
"2. 历史文件
"3. 上次使用时间
"4. 本次使用持续时间

command -nargs=1 Ifndef call Ifndef()
call linlin_popup_menu#AddMenuItem("插入预防宏", 'execute call Ifndef()')
call linlin_popup_menu#AddMenuItem("查看窗口布局", 'execute echo winlayout()')

"~/vimfiles/pack/MyVim/start
"~/vimfiles/pack/MyVim/record.md

"}}} plugin

"## note {{{
"--------------------------------------------------------------------------------

"### platform

"if has('win32')
    "echo "win32"
"elseif has('unix')
    "echo "unix"
"elseif has ('mac')
    "echo "mac"
"else
    "echo "else"
"endif

"}}} note
