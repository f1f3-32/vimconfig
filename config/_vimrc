"  _       _           _                   _                           
" | |     (_)  _ __   ( )  ___    __   __ (_)  _ __ ___    _ __    ___ 
" | |     | | | '_ \  |/  / __|   \ \ / / | | | '_ ` _ \  | '__|  / __|
" | |___  | | | | | |     \__ \    \ V /  | | | | | | | | | |    | (__ 
" |_____| |_| |_| |_|     |___/     \_/   |_| |_| |_| |_| |_|     \___|
"
"================================================================================
"                H                                                           H  
"             HHHHHH                                 HHHHHHH                HH  
"           HHH    HH                              HHH     HH               HH  
"          HH       HH                            HHt       HH             HH   
"         HH         HE                          HH         HH             H    
"        HH          HH                         HH           H            HH    
"       HH            Hi                       HH            H            H     
"      HH             HH                      HH             H           HH     
"     HH               HH                    HH             iH          HH      
"    HH                iH                  WHH              HH         HH       
"   HH                  HH                HHL               HH        HH        
"  HH                    HH             HHH                 jH       HH         
" HH                      HHH.        HHHW                   H     HHH          
" HW                        HHHHHHHHHHHt                     HHHHHHHW           
"HH                             iHE                            ,H,              
"================================================================================
" 时间：2024年7月26日
" vim 的配置，用标记折叠的方式组织起来，感觉很好


"# 使用方法 {{{
"tags: use, use vim, use method
"2024-07-28 01:40
"本文件使用标记折叠方法组织内容

"## 例子 {{{

"### 折叠的使用方法 {{{ 
"tags: fold, use fold

":set foldmethod
"查看折叠方法

":set foldmethod*marker
"
"通过帮助系统查看有关折叠的快捷键：
":h z

"作者常用的（在 normal 模式下使用）:
"zM      递归的折叠所有部分
"zR      展开所有折叠的部分（包括递归）
"zm      增加一层(:h foldlevel)折叠
"zr      减去一层折叠
"zc      打开光标下的折叠
"za      打开/关闭光标下的折叠
"zj      去到下一个折叠上
"zk      去到上一个折叠上

"}}} ### 折叠的使用方法

"### 获取指定目录下的所有文件的路径 {{{
"tags: path, dir

"#### windows {{{

"CMD
"
"         `:r! dir /b /s src/`"
"              
"            选中读取的内容
"
"         `:'<,'>sort /.*\.h/  r`
"
"         依据文件的后缀进行排序

"}}} #### windows

"}}} ### 获取指定目录下的所有文件的路径

"}}} ## 例子

"### 查找替换 : substitute, find, replace {{{
"2024-07-28 01:16
"
"#### 替换多个**文件**中指定文本
"
" 被替换者: test_123
" 替换者: new_123
" 在同一个目录<dir>中的所有 h 文件中
" :cd <dir>
" :args *.h
" :argdo %s/test_123/new_123/ge | update
" 上面一行命令的解释：
"   argdo 对所有在 args 中的文件执行后面的命令
"   %s/被替换者/替换者/ge
"     g 整个文件的所有符合条件者都被替换
"     e 没有找到的情况，不报错
"   | 用于执行多个命令
"   update 保存对文件执行的操作（只对已经修改的缓冲有效）

"#### 替换换行符

"tags: newline, dos, crlf, \r\n, \n
":%s/\n/ /g

"}}} ### 查找替换

"##  option 的设置

"set imd
" 是一个布尔选项，上面一行表示开启

"set noimd
"上面一个表示取消

"}}} # 使用方法

"# plug（插件）相关的设置 {{{

"## plug-vim {{{    

call plug#begin('~/.vim/plugged')

Plug 'mechatroner/rainbow_csv'

"生成 vim 启动时间的数据，然后优化启动时间
Plug 'hyiltiz/vim-plugins-profile'

" 显示可见缓存内容的上下文，它支持非常广泛的文件类型，在查找源代码文件时非常有用。
"在大多数编程语言中，此上下文将显示您正在查看的函数，以及在该函数中可见代码周围的循环或条件。
Plug 'wellle/context.vim'
Plug 'itchyny/lightline.vim'
Plug 'zyedidia/vim-snake'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'luochen1990/rainbow'
Plug 'matze/vim-move'
"Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
"要说一句实话，补全是很好的，但是我用的不是很习惯，还是使用 vim
"自带的补全感觉舒服，而且还是很好用的，只要进行自定义就行，就是
"使用 dictionary、thesaurus、omni 和 tags 补全就行。

Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-surround'
" 这个插件的功能就很强大了，也很实用

Plug 'morhetz/gruvbox'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'kien/ctrlp.vim'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" 两个是一套的代码片段

Plug 'shougo/vimproc.vim'
Plug 'elzr/vim-json'
Plug 'tomtom/tlib_vim'
"Plug 'thaerkh/vim-workspace'
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-vinegar'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'chxuan/cpp-mode'
"Plug 'bling/vim-bufferline'

"Plug 'justinmk/vim-sneak'
"s, S 两个键都是我喜欢用的，vim-sneak
"默认会占用它们，有点不喜欢，不过换一个就行了
"有些麻烦，以后再说吧！
"2024-08-13 不用了，与我的习惯相冲

"Plug 'tribela/vim-transparent'

call plug#end()

"}}} ## plug-vim

"## 对插件进行设置 {{{
" tags: plugins setting


"### EasyAlign

vnoremap <Enter> <Plug>(EasyAlign)
"xnoremap <Leader>g :Goyo<CR>
xnoremap ga <Plug>(EasyAlign)
nnoremap ga <Plug>(EasyAlign)

"### rainbow

let g:rainbow_active=1

"### limelight

" 问题: unsupported color scheme. g:limelight_conceal_ctermfg required
" " 解决:https://github.com/junegunn/limelight.vim#options
" " Color name (:help cterm-colors) or ANSI code

" " Color name (:help gui-colors) or RGB color
"
" " Default: 0.5
"
" " Number of preceding/following paragraphs to include (default: 0)
"
" " Beginning/end of paragraph
" "   When there's no empty line between the paragraphs
" "   and each paragraph starts with indentation
"
" " Highlighting priority (default: 10)
" "   Set it to -1 not to overrule hlsearch

let g:limelight_priority = -1
let g:limelight_eop = '\ze\n^\s'
let g:limelight_bop = '^\s'
let g:limelight_paragraph_span = 1
let g:limelight_default_coefficient = 0.7
let g:limelight_conceal_guifg = '#777777'
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_ctermfg = 'gray'

"### EasyMotion

"map <Leader> <Plug>(easymotion-prefix)

"### DoxygenToolkit

"Use:
":Dox
":DoxLic
":DoxAuthor
":DoxUndoc(DEBUG)
":DoxBlock
nnoremap <c-c> :Dox<cr>
let g:DoxygenToolkit_commentType          = "C++"
let g:DoxygenToolkit_briefTag_pre         = "\\brief "
let g:DoxygenToolkit_templateParamTag_pre = "\\tparam "
let g:DoxygenToolkit_paramTag_pre         = "\\param "
let g:DoxygenToolkit_returnTag            = "\\return "
let g:DoxygenToolkit_throwTag_pre         = "\\throw " " \\exception is also valid
let g:DoxygenToolkit_fileTag              = "\\file "
let g:DoxygenToolkit_authorTag            = "\\author "
let g:DoxygenToolkit_dateTag              = "\\date "
let g:DoxygenToolkit_versionTag           = "\\version "
let g:DoxygenToolkit_blockTag             = "\\name "
let g:DoxygenToolkit_classTag             = "\\class "
let g:DoxygenToolkit_authorName           = "linlin"
let g:DoxygenToolkit_licenseTag           = "My onw license"

"### workspace 

"let g:workspace_autocreate = 1
"let g:workspace_session_name = 'Session.vim'
"let g:workspace_persist_undo_history = 1

"### sneak 

let g:sneak#label = 1
" 2-character Sneak (default)
"nmap <C-f>s <Plug>Sneak_s
"nmap <C-f>S <Plug>Sneak_S
" visual-mode
"xmap <C-f>s <Plug>Sneak_s
"xmap <C-f>S <Plug>Sneak_S
" operator-pending-mode
"omap t <Plug>Sneak_s
"omap t <Plug>Sneak_S

" repeat motion
"map t <Plug>Sneak_;
"map t <Plug>Sneak_,

" 1-character enhanced 'f'
"nmap t <Plug>Sneak_f
"nmap T <Plug>Snenx_F
" visual-mode
"xmap <C-f>t <Plug>Sneak_f
"xmap <C-f>T <Plug>Sneak_F
"" operator-pending-mode
"omap t <Plug>Sneak_f
"omap t <Plug>Sneak_F

"" 1-character enhanced 't'
"nmap t <Plug>Sneak_t
"nmap T <Plug>Sneak_T
"" visual-mode
"xmap <C-f>t <Plug>Sneak_t
"xmap <C-f>t <Plug>Sneak_T
"" operator-pending-mode
"omap t <Plug>Sneak_t
"omap t <Plug>Sneak_T

"" label-mode
"nmap t <Plug>SneakLabel_s
"nmap t <Plug>SneakLabel_S

"### Goyo

" Goyo 要与 Limelight 聚和使用

"### UltiSnips 

"配置的方式，去看文档就行
"2024年08月12日
"突然就不能用了，然后搞了几天，不能正常使用，问题是 pythonthreedll
"的设置方法错了，最后找到了正确的方式：
"
"首先使用 :echo has("python3") 查看是否有 pytyon311.dll ，只有两个返回值 0, 1
"通过 :set pythonthreedll=D:\Programs\Python\Python311\python311.dll
"( 这个位置是我的 )
" 设置动态库，然后再看一遍 :echo has("python3") 返回值是否为 1

"确保 UltiSnips 和 vim-snippets 都已安装
"然后就行了！

"### lightline

let my_lightline_color = [
            \  "16color",
            \  "apprentice",
            \  "ayu_dark",
            \  "ayu_light",
            \  "ayu_mirage",
            \  "darcula",
            \  "default",
            \  "deus",
            \  "jellybeans",
            \  "landscape",
            \  "materia",
            \  "material",
            \  "molokai",
            \  "nord",
            \  "OldHope",
            \  "one",
            \  "PaperColor",
            \  "PaperColor_dark",
            \  "PaperColor_light",
            \  "powerline",
            \  "powerlineish",
            \  "rosepine",
            \  "selenized_black",
            \  "selenized_dark",
            \  "selenized_light",
            \  "selenized_white",
            \  "seoul256",
            \  "simpleblack",
            \  "solarized",
            \  "srcery_drk",
            \  "Tomorrow",
            \  "Tomorrow_Night",
            \  "Tomorrow_Night_Blue",
            \  "Tomorrow_Night_Bright",
            \  "Tomorrow_Night_Eighties",
            \  "wombat"
            \]

let g:lightline = {
            \'colorscheme' : my_lightline_color[8],
            \}


"}}} ## 对插件进行设置

"}}} # plug（插件）相关的设置

"# 基础设置 {{{
"tags: basic setting
"查看选项的具体效果，请使用 `:help <option-name>`

"## option 设置 {{{

" 使用 vimscript 进行插入的时候，tab 会成为8个空格的，所以不要开启的好
               " 自动跟紧上一行的缩进
"autoload-plugin
"packloadall          " 加载所有插件
"silent! helptags ALL " 为所有插件加载帮助文档
"noh                  "清楚高亮显示
set hlsearch            "高亮‘/’搜索到的匹配项

filetype plugin on
filetype indent on   " 根据文件类型自动缩进
filetype on
set fileencodings=utf-8,gbk

"### gui options {{{
    
"set showtabline=1
"set guioptions-=T
"set guioptions-=m
set guioptions=
set guifont=AnonymicePro_Nerd_Font_Mono:h16
set laststatus=2
"set guifont=Lucida_Console:h18
"set guifont=Courier_New:b:h16


let m_show_gui = v:false

"切换菜单、工具栏的显示
function! SwitchGui()
    if g:m_show_gui
        let g:m_show_gui = v:false
        set guioptions-=m
        set guioptions-=T
    else
        let g:m_show_gui = v:true
        set guioptions+=m
        set guioptions+=T
    endif
endfunction


"}}} gui options

"set completeopt=menu,menuone,noselect

"set textwidth=80       " 限制一行的长度，不错的功能
"set backspace=2        " 修正终端上的退格键 Backspace 的行为
"set softtabstop=4
"set relativenumber     "相对行号
"set paste              " 开启这个选项，复制进来的文本的换行符就不会乱
"set cindent            " C 语言的缩进
        "setlocal nomodifiable
        "setlocal nobuflisted
        "setlocal noswapfile
        "setlocal bufhidden=hide
        "setlocal buftype=nofile
        "setlocal noreadonly
set noswapfile
set nobackup
set noundofile
set virtualedit=all "详细信息去看帮助文档
set scrolloff=5     " vertical scrolling the cursor distance with bottom
set t_Co=256        " 开启 256 色

set foldlevel=3
set foldmethod=marker
"set cursorline
"set cursorcolumn

set syntax=on       " 开启语法高亮
set backspace=3
set sidescroll=10       " 自动的滚动文本，当移动的文本没有显示时
set shiftwidth=4        " 用于自动缩进的空格数量
set expandtab           " 将制表符 Tab 展开为空格，这对于 Python 尤其有用
set tabstop=4           " tab 的空格数量
set number              " 显示行号
set nowrap
set mouse=a          " 开启鼠标，默认是不能使用鼠标的
set autoindent " 开启自动缩进
"set iminsert=2     " 在 gvim 中存在很大的问题——我使用的是 rime 的郑码，进入
"insert mode 会导致输入法变为郑码，但我想用的是英文，因为，我用 vim
"是为了写代码。使用这个选项，不如直接使用 windows 的输入切换方式。

"}}} ## option 设置

"## runtimepath 路径 {{{
"查看当前的 runtimepath

set runtimepath+=~\.vim\UltiSnips
set runtimepath+=~\.vim

"}}} ## rumtimepath 路径

"## mapping {{{

"### leader key {{{
"let mapleader = "\\"
let mapleader = "\<space>"
"let mapleader = " "
nnoremap <LEADER>z ZZ
nnoremap <LEADER>v :Goyo<CR>
nnoremap <LEADER>t <c-w>T
nnoremap <LEADER>sc :!start cmd<CR>
nnoremap <LEADER>o  :tabnew $MYVIMRC<CR>
nnoremap <LEADER>ms :set foldmethod=syntax<CR>
nnoremap <LEADER>mr :set nornu<CR>
nnoremap <LEADER>mo :browse oldfiles<CR>
nnoremap <LEADER>md :tabnew $HOME/vimfiles/pack/MyVim<CR>
nnoremap <LEADER>i  :call me#CreateImplement()<CR>
nnoremap <LEADER>e  :call me#GenerateDefine()<CR>
nnoremap <LEADER>cd :cd ~/code/cpp/basic<CR>
nnoremap <LEADER>q :
nnoremap <Leader>g :call SwitchGui()<CR>
map <Leader> <Plug>(easymotion-prefix)
"}}}  leader key

"normal mode
"--------------------------------------------------------------------------------
"function key
nnoremap <F2> :NERDTreeToggle<CR>
"nnoremap <F2> :Vexplore<CR>
nnoremap <F3> :tabnew<CR>
nnoremap <F6> :call me#Compile()<CR>
nnoremap <F7> :w<CR>
nnoremap <F8> :wa<CR>
nnoremap <F9> :Tagbar<CR>
nnoremap <F10> :wqa<CR>
nnoremap gs :call me#SwitchToSource()<CR>
nnoremap cx :call CopyLine()<CR>
"nnoremap <Space> <C-d>
nnoremap <M-w> <C-w>
nnoremap <c-q> :
"nnoremap <c-v> <c-q> "与终端中的快捷键冲突
nnoremap <C-n> :bel vnew<cr>
nnoremap <C-b> :call me#Compile()<CR>
"nnoremap <c-s> :w<cr>
"nnoremap <LEADER>mn :set nu<CR>
"nnoremap <LEADER>md :tabnew $HOME/AppData/Local/nvim/pack/plugins/start/me<CR>

"insert mode
""--------------------------------------------------------------------------------
inoremap <F2> <CTRL-E>
inoremap <F8> <C-R>=ListMonths()<CR>

inoremap <c-q> <Esc>:
"inoremap <c-s> <esc>:w<cr>
"inoremap <C-L> <C-X><C-L>
"inoremap <C-D> <C-X><C-D>
"inoremap <C-F> <C-X><C-F>
"inoremap <C-]> <C-X><C-]>
"inoremap <silent><expr> <Tab> coc#pum#confirm()
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <S-Alt> <Esc>:w!<cr>

"nnoremap <LEADER>d :call append(line('.'), strftime('%c'))<CR>

"}}} ## mapping

"## autocmd : au {{{

au! BufNewFile *.cpp,*.h,*.hpp setlocal foldmethod=syntax
au! BufRead *.cpp,*.h,*.hpp setlocal foldmethod=syntax
au! BufRead *.ixx set filetype=cpp
au! BufRead *.md set wrap

"}}} ## autocmd

"## abbreviations {{{

"iab ce std::cout <<  << std::endl;<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left> 
"iab ff for(int i = 0; i < n; ++i)<CR>{<CR><SPACE><SPACE><SPACE><SPACE>
"iab rr std::random_device rd;<CR>std::uniform_int_distribution dist(0, 10);
 
"}}} ## abbreviations

"## colorscheme {{{
"tags: cs, color

" 暗系配色，很漂亮！
colorscheme molokayo 


"}}} ## colorscheme

"## 自定义状态栏 {{{

"set statusline=[%n]%1*%F%=%0*%2*%l,%c\ %p%%%0*\|ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\    
"set statusline=[%n]\ %#HIComment%F%=\ \|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\     " 没有效果
"set statusline=[%n]\ %f%m%r%h\ \|\ \ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\
"set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurrentDir()}\ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\

"}}} ## 自定义状态栏


"## register {{{

" 清空寄存器
"let @a ="" 

"}}} ## register

"}}} # 基础设置

"# 自定义的设置 {{{

"## my variable {{{

let $my_dict = "D:\\user\\code"
if has('win32')
    let $mycfg="~/vimfiles/pack/MyVim/start"
    let $mytmp="~/vimfiles/tmp"
    let $myinclude="D:\\user\\code\\libraries\\include"
    let $myhome="D\\user\\code"
    let $mynote=$my_dict.."\\note"
    let $mycpp = "D:\\user\\code\\practice\\cpp"
    let $myprac = "D:\\user\\code\\practice"
else
    let $mycfg="~/.vim/pack/MyVim/start"
    let $mytmp="~/.vim/tmp"
endif

"}}} ## my variable

"## 自定义的函数 {{{

"向下复制行而不改变光标位置
function! CopyLine()
    let l:old_cursor = getcursorcharpos()
    execute "normal vYp"
    call setcursorcharpos(l:old_cursor[1]+1, l:old_cursor[2])
endfunction

"使窗口位于中间，并打开顶部打开一个预览窗口
function! PlaceholderWindow()
    "wincmd T
    let winid = win_getid()
    vnew
    vertical resize 55
    call win_gotoid(winid)
    split
    resize 5
    call win_gotoid(winid)
endfunction

"C++ 插入预防宏
function! Ifndef()
    let name = input("请输入宏名：")
    if empty(name) == 1
        return
    endif
        let macro_name = toupper(name) .. "_H_"
        let content = [
                    \ "#ifndef " .. macro_name,
                    \ "#define " .. macro_name,
                    \]
        call append(line("0"), content)
        call append(line("$"), "#endif // " .. macro_name)
endfunction

"查看中文月份
func! ListMonths()
    "call complete(col('.'), ['January', 'February', 'March',
                "\ 'April', 'May', 'June', 'July', 'August', 'September',
                "\ 'October', 'November', 'December'])
    let cpp_complete = [
                \ "std::cout << << std::endl;",
                \ "int main() { f(); }",
                \]
    call complete(col('.'), cpp_complete)
    "实现光标的移动，在补全使用特殊的参数，在选择后，解析结果，然后移动光标
    return ''
endfunc

"包含网址的一行，变为 markdown 超链接格式
function! MDLink()
    execute "normal I[](\<Esc>A)\<Esc>0a"
endfunction

command -nargs=0 MDLink call MDLink()

"### 将当前行或选中区域保存到字典补全文件 {{{

"dictionary : CTRL_X CTRL_K
":w >> ~/vimfiles/complete/dictory/all.txt

command -nargs=0 AppToDict call AppendToDict()
func! AppendToDict()
    "execute "normal :w >> ~/vimfiles/complete/dictionary/all.txt"
    "打开文件（以追加文件的方式打开）
    "获取当前行，追加至打开的文件
    "关闭文件
    let user_profile = expand("~")
    let dict_file = user_profile.."/vimfiles/complete/dictionary/all.txt" 
    let cur_line_str = [getline(".")]
    if filewritable(dict_file)
        call writefile(cur_line_str, dict_file, "a") 
    else
        echo "File " ..dict_file.. " isn't writable."
    endif
endfunc

"}}} ### 将当前行或选中区域保存到字典补全文件

"### 中文输入法问题 {{{
"https://blog.51cto.com/u_15273875/3858820
":help iminsert
"if has('multi_byte_ime')
    ""没有开启 IME 时的光标背景色
    "hi Cursor guifg=bg guibg=Orange gui=NONE
    ""开启 IME 时的光标背景色
    "hi CursorIM guifg=NONE guibg=Skyblue gui=NONE
    ""关闭 vim 的自动切换 IME 输入法（插入模式和正常模式）
    "inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
    ""set imi=2 
"endif

"if has('gui_running')
  "set imactivatekey=C-space  
  "inoremap <ESC> <ESC>:set iminsert=2<CR>
"endif

"2024年07月23日
"这个中文输入法的问题没有最完美的解决方法，其实现在这样的效果是可以的，所以，不要纠结了！
"操作系统：windows11
    "所使用的输入法：rime
        "默认情况下：输入法被禁用
        "在 nromal 模式下开启或在 insert 模式下开启：从 normal 进入 insert
        "，输入法会存在，退出 insert
        "，输入法会禁用，再次进入，输入法会开启（以rime的英文模式退出，还是中文模式退出，都会开启）.
    "所使用的输入法：sougou
        " 使用感受就是最完美的。

"}}} ### 中文输入法问题


"}}} ## 自定义的函数

"## menu {{{
" --------------------------------------------------------------------------------
" 在 vim 中，菜单是一个很强大的功能，但是需要自定义
" insert mode menu
"amenu ToolBar.BuiltIn21 :call me#Compile()<CR>
"amenu ToolBar.BuiltIn22 :!start subl.exe %<CR>
"amenu icon=~/vimfiles/bitmaps/main_icon.xpm ToolBar.Test :echo "test"<CR>

"添加分隔符
":menu Example.-Sep- 


"2024-07-28 01:19
"https://superuser.com/questions/11289/how-do-i-customize-the-gvim-toolbar
":tmenu ToolBar.taglist Toggle display of the Taglis
":amenu ToolBar.taglist :TlistToggle>
"tmenu 的作用是：工具提示，在鼠标悬停是显示信息
"amenu 决定图标被点击时会发生什么
"
"加上图标
":amenu icon=~/vimfiles/bitmaps/main_icon.bmp ToolBar.taglist :TlistToggle>
"在 windows 图标的格式是 bmp，在 linux 是 xpm ，图标的大小要是 18x18 的。

"使用 gimp 制作图标，导出的图标的要选中：导出图像为 BMP -> 兼容性选项 -> 不要写入色彩空间信息

" ### term_start
"term_start({cmd} [, {options}])			*term_start()*
":call term_start(['sh', '-c', 'echo hello'])

tmenu icon=~/vimfiles/bitmaps/dd.bmp ToolBar.deleteline Delete current line
amenu ToolBar.deleteline dd

tmenu icon=~/vimfiles/bitmaps/build1.bmp ToolBar.cmakebuild CMake build
amenu ToolBar.cmakebuild :call CMakeBuild()<CR>

tmenu icon=~/vimfiles/bitmaps/run.bmp ToolBar.cmakerun CMake Run
amenu ToolBar.cmakerun :call CMakeRun()<CR>

tmenu icon=~/vimfiles/bitmaps/sublime.bmp ToolBar.subl Use sublime open under the cursor of file.
amenu icon=~/vimfiles/bitmaps/sublime.bmp ToolBar.subl :!start "C:/Program Files/Sublime Text/subl.exe" %<CR>

tmenu icon=~/vimfiles/bitmaps/cmd.bmp ToolBar.runcmd Open standardalong cmd window.
amenu ToolBar.runcmd :!start cmd<CR>

tmenu icon=~/vimfiles/bitmaps/vim.bmp ToolBar.runvim Open standardalong vim window.
amenu ToolBar.runvim :!start gvim<CR>

tmenu icon=~/vimfiles/bitmaps/explorer.bmp ToolBar.explorer Open file explorer.
amenu ToolBar.explorer :!start explorer .<CR>

tmenu icon=~/vimfiles/bitmaps/newtabonly.bmp ToolBar.OnlyTab Open new tab and close all others.
amenu ToolBar.OnlyTab :call OnlyTab()<CR>

tmenu icon=~/vimfiles/bitmaps/close_buffer.bmp ToolBar.close_buffer close buffer at the beneth cursor.
amenu ToolBar.close_buffer :q!<cr>

tmenu icon=~/vimrc/bitmaps/me.bmp ToolBar.me 保存我的思考
amenu ToolBar.me :call Me()<CR>

tmenu icon=~/vimfiles/bitmaps/code-snippet.bmp ToolBar.EditSnippets edit the UltiSnips
amenu ToolBar.EditSnippets :tabnew ~/.vim/UltiSnips<CR>

function! Me()
    if !filewritable(expand("~").."/me.md")
        call writefile([''], expand("~").."/me.md", a)
    endif
    write >> ~/me.md
    edit! ~/me.md
endfunction

function! OnlyTab()
    tabnew | tabonly
endfunction

"2024-07-30 00:23
"使用 Gimp 制作 bmp 图片，用于工具栏的图标
"导出的图像大小：36x36
"导出的图像格式：bmp
"导出选项：兼容选项下，选中不要保存色彩空间信息；位深为 24
"
"还是存在问题，从 vimrc 加载工具栏的图标不显示，而在启动后可以
"浪费时间，设计的有问题，不用 toolbar 了
"
"2024-07-30 11:17 最后还是解决问题了，是因为在 amenu 之前使用了 tmenu ，所以
"就不能正确的加载图标，在取消 tmenu 菜单后，就正常了，最终的原因是，要在 temnu
"中是使用图标（而只在 amenu 中使用了），而在 tmenu 后面的 amenu 不用，这样就
"可以正常显示图标了。
"

"### gvim linlin menu {{{
"tags: Lin

amenu &Lin.&Run\ code :call me#Compile()<CR>
amenu &Lin.-Spec- :
amenu &Lin.CMake\ &Build :call CMakeBuild()<CR>
amenu &Lin.CMake\ &Run :call CMakeRun()<CR>
amenu &Lin.-Spec- :
amenu &Lin.CD\ &cpp :cd $mycpp<CR>
amenu &Lin.CD\ &note :cd $mynote<CR>
amenu &Lin.-Spec- :
amenu &Lin.&Doxygen :Dox<CR>

"}}} ### gvim linlin menu

"cmake 构建
function! CMakeBuild()
    execute "normal :tabnew<CR>"
    call term_start('cmake -Bbuild')
endfunction

"cmake 运行
function! CMakeRun()
    execute "normal :tabnew<CR>"
    "call term_start('python C:\\Users\\16207\\vimfiles\\tmp\\run_qt.py')
    "call term_start(["cmd", "/k", "chch 65001", "&", "python C:\\Users\\16207\\vimfiles\\tmp\\run_qt.py"]) 
    execute "!start cmd /c python C:\\Users\\16207\\vimfiles\\tmp\\run_qt.py"
endfunction


"function! VSOpen()
"C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe"
"endfunction

"删除当前行的所有空格，并将它与上一行相连接
fun! JoinLine() 
    let cur_line = getline(".")
    let has_minus = match(cur_line, '-')

    " 只有两个值：空格" "，和下划线"-"
    let symbol_1 = ""
    if has_minus > -1 
        let symbol_1 = "_"
    endif
    let indent         = match(cur_line, "\\w")
    let sub_str        = trim(cur_line)
    let sub_str        = trim(sub_str, "-", 2)
    let sub_str        = trim(sub_str, " ", 2)
    let sub_str        = substitute(sub_str, " ", symbol_1, "g")
    let cur_line_num   = getcurpos(".")
    let above_line     = getline(cur_line_num[1]-1)
    let is_empty_line  = match(above_line, "^\\s*$")
    if is_empty_line  == -1
        "execute "normal kJA "
        call setline(cur_line_num[1]-1, above_line..sub_str)
        call setline(cur_line_num[1], "")
        execute "normal k"
    else
        let indent_str = ""
        if indent > 0
            let indent_str = cur_line[:indent-1]
        endif
        call setline(".", indent_str..sub_str)
    endif
    "execute "normal V:s/\s/"..symbol_1.."/g<CR>:noh<CR>kJA"
endfun

"inoremap <C-F> <ESC>V:s/\s//g<CR>:noh<CR>kJA
"inoremap <C-F> <C-R>=JoinLine()<CR>
inoremap <C-I> <ESC>:call JoinLine()<CR>A

"}}} ## menu

"## 补全设置 {{{
"tags: complete, cpl
""!
"\beginmd
"查看补全的帮助 `:h ins-complete`
"
"补全方式
"
"vim中有不同的补全方式，调用的快捷键是不同。不同的方式，有不同的补全文本来源。
"
" - 整行补全                    ctrl-x ctrl-l
" - 当前文件中的关键补          ctrl-x ctrl-n
" - dict(dictionary) 补全       ctrl-x ctrl-k
" - thesaurus 补全              ctrl-x ctrl-t
" - 当前的 include              ctrl-x ctrl-i
" - tag 补全                    ctrl-x ctrl-]
" - 文件名补全                  ctrl-x ctrl-f
" - 定义或宏补全                ctrl-x ctrl-d
" - 在 vim 的命令补全           ctrl-x ctrl-v
" - 用户定义的补全              ctrl-x ctrl-u
" - omni 补全                   ctrl-x ctrl-o
" - 拼写检查                    ctrl-x s 
" - 在 complete 中的关键字      ctrl-x ctrl-p
" - 停止补全                    ctrl-x ctrl-z
"   
"CTRL-Y		  Yes: Accept the currently selected match and stop completion.
"CTRL-E		  End completion, go back to what was there before selecting a
"<BS> and CTRL-H   Delete one character, find the matches for the shorter word
"            before the cursor.  This may find more matches.
"CTRL-L	     Add one character from the current match, may reduce the
"   	     number of matches.
"any printable, non-white character:
"   	     Add this character and reduce the number of matches.
"
" thesaurus 补全
" 
" thesaurus 补全类似于 dict 补全，但有些不同，dict 补全会将匹配的单词列出，而
" thesaurus 不仅会列出所有匹配项，更会将，一行的单词列出，就算不匹配。
" 
" 用户定义的补全 `:h complete-functions`                                     
" omni 补全 `:h omnifunc`
"
"\endmd

inoremap <C-]> <C-X><C-]>
"inoremap <C-F> <C-X><C-F>
inoremap <C-L> <C-X><C-L>

" 取消补全
"inoremap <C-I> <C-E>

"### thesaurus
set thesaurus+=~/vimfiles/complete/thesaurus/cpp.txt

"### dictionary
"tags: dict, 
"插入模式下 Ctrl-X Ctrl-K 触发
set dict+=~/vimfiles/complete/dictionary/cpp-std.txt
set dict+=~/vimfiles/complete/dictionary/cpp-keywords.txt
set dict+=~/vimfiles/complete/dictionary/cpp-std-header.txt
set dict+=~/vimfiles/complete/dictionary/qtbase-dict.txt
set dict+=~/vimfiles/tmp/CMakeLists.txt
set dict+=~/vimfiles/complete/cmake_command.txt
set dict+=~/vimfiles/complete/cmake_keyword.txt

"### tags
"需要使用 ctags 程序(请先下载)
"插入模式下 Ctrl-N 触发
set tags+=D:/Qt/6.5.0/Src/widgets/tags
"set tags+=~/vimfiles/tags/tags
"set tags+=D:/user/code/practice/qt/tdesktop/tags
"set tags+=D:/Qt/Tools/mingw1120_64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/tags,$lin/libraries/jsoncpp/tags,$lin/libraries/include/lin/tags

"}}} ## 补全设置

"## python {{{
if &filetype == "python"
    set foldmethod=indent
endif

" 这里就根据你自己的 python 安装位置, 进行调整
if windowsversion() == "10.0"
    set runtimepath+="D:\\Programs\\Python\\Python311\\python311.dll"
    set runtimepath+=C:/Users/16207/vimfiles/bitmaps
    "set pythonthreedll="D:\\Programs\\Python\\Python311\\python311.dll"
    set pythonthreedll=D:\Programs\Python\Python311\python311.dll 
    set pythonthreehome=D:\Programs\Python\Python311
    "set pythonthreehome="D:\\Programs\\Python\\Python311"
    "colorscheme OceanicNext
else
    set runtimepath+="D:\\Users\\Programs\\Python\\Python38\\python38.dll"
    set pythonthreedll=D:\\Users\\Programs\\Python\\Python38\\python38.dll 
endif

"}}} ## python

"## Symbol {{{
"tags: symbol

"┌─────────────┐
"│             │
"└─────────────┘

"/zbf": [ "┌─────────────┐", "│             │", "├─────────────┤", "└─────────────┘", "┌", "┬", "┐", "┌", "─", "┐", "┍", "┯", "┑", "╔", "╦", "╗", "├", "┼", "┤", "│", "┼", "│", "┝", "┿", "┥", "╠", "╬", "╣", "└", "┴", "┘", "└", "─", "┘", "┕", "┷", "┙", "╚", "╩", "╝", "┏", "┳", "┓", "┏", "━", "┓", "┎", "┰", "┒", "╔", "═", "╗", "┣", "╋", "┫", "┃", "╋", "┃", "┠", "╂", "┨", "║", "╬", "║", "┗", "┻", "┛", "┗", "━", "┛", "┖", "┸", "┚", "╚", "═", "╝", "╓", "╥", "╖", "╒", "╤", "╕", "┏", "┱", "┐", "┌", "┲", "┓", "╟", "╫", "╢", "╞", "╪", "╡", "┡", "╃", "┤", "├", "╄", "┩", "╙", "╨", "╜", "╘", "╧", "╛", "└", "┴", "┘", "└", "┴", "┘", "┌", "┬", "┐", "┏", "┳", "┓", "╭", "─", "╮", "╱", "─", "╲", "┟", "╁", "┧", "┞", "╀", "┦", "│", "╳", "│", "│", "┼", "│", "┗", "┻", "┛", "└", "┴", "┘", "╰", "─", "╯", "╲", "─", "╱", "┄", "┈", "┉", "┅", "┇", "┋", "┊", "┆" ]

"}}} ## Symbol

"}}} # 自定义的设置

"# 平台相关的设置 {{{
"tags: platform

"if has('win32')
"echo "win32"
"elseif has('unix')
"echo "unix"
"elseif has ('mac')
"echo "mac"
"else
"echo "else"
"endif


"对操作系统版本的判断
"使用 windowsversion() 函数：
"版本：win11 ，结果 10.0

"}}} # 平台相关的设置

"# 自制插件的设置 {{{
"~/vimfiles/pack/MyVim/start
"~/vimfiles/pack/MyVim/record.md

"## linlin popup menu setting

if !exists("g:loaded_popupmenu")
    call linlin_popup_menu#AddMenuItem('t', "查看标签行", 'execute :tabs')
    call linlin_popup_menu#AddMenuItem('g', "Goyo", "execute Goyo")
    "call linlin_popup_menu#AddMenuItem("复制", 'execute normal gv"+y')
    "存在popup窗口不能关闭的问题
    call linlin_popup_menu#AddMenuItem('p', "粘贴", 'execute normal "+p')
    "call linlin_popup_menu#AddMenuItem('c', "进入 C++ basic 目录", 'execute cd ~/code/cpp/basic')
    call linlin_popup_menu#AddMenuItem('w', "开启换行", 'execute set wrap')
    call linlin_popup_menu#AddMenuItem('x', "编辑我的插件", 'execute tabnew ~/vimfiles/pack/MyVim/start')
    "call linlin_popup_menu#AddMenuItem("打开我的插件目录", 'execute cd ~/code/cpp/basic')
    call linlin_popup_menu#AddMenuItem("k", "查看窗口布局", 'execute echo winlayout()')
    call linlin_popup_menu#AddMenuItem("l", "在左侧添加一个宽度为 60 的窗口", 'execute call PlaceholderWindow()')
endif

"查看当前信息：
"1. pwd
"2. 历史文件
"3. 上次使用时间
"4. 本次使用持续时间

"### 得到当前时间
"nnoremap <LEADER>d :call append(line('.'), strftime('%c'))<CR>


"使用: `:h strftime` 查看相应的介绍

"- strftime
"- localtime
"    - 从 1970 年 1 月开始的秒数
"- getftime
"    - 得到指定文件的最后修改时间，从 1970 年 1 月开始的秒数
"- strptime
"    - 将指定格的字符串时间转换为 Unix 时间戳

"2024-7-27
"我安装了两个插件：
"Plug 'SirVer/ultisnips' 这个插件依赖于 python3
"Plug 'honza/vim-snippets'
"UltiSnips 提供了更方便的获取时间的方法——在编辑的时候

"## 编辑 me.vim
command -nargs=0 LinMe :e $HOME/vimfiles/pack/MyVim/start/me/plugin/me.vim

"}}} # 自制的插件


