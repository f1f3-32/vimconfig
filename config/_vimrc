"# Plug {{{

"## plug-vim{{{
"--------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'luochen1990/rainbow'
"Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-surround'
Plug 'morhetz/gruvbox'
Plug 'vim-scripts/DoxygenToolkit.vim'
call plug#end()
"}}}

" ## DoxygenToolkit {{{
"--------------------------------------------------------------------------------
"Use:
":Dox
":DoxLic
":DoxAuthor
":DoxUndoc(DEBUG)
":DoxBlock
nnoremap <c-c> :Dox<cr>
let g:DoxygenToolkit_commentType          = "C++"
let g:DoxygenToolkit_briefTag_pre         = "\\brief "
let g:DoxygenToolkit_templateParamTag_pre = "\\tparam "
let g:DoxygenToolkit_paramTag_pre         = "\\param "
let g:DoxygenToolkit_returnTag            = "\\return "
let g:DoxygenToolkit_throwTag_pre         = "\\throw " " \\exception is also valid
let g:DoxygenToolkit_fileTag              = "\\file "
let g:DoxygenToolkit_authorTag            = "\\author "
let g:DoxygenToolkit_dateTag              = "\\date "
let g:DoxygenToolkit_versionTag           = "\\version "
let g:DoxygenToolkit_blockTag             = "\\name "
let g:DoxygenToolkit_classTag             = "\\class "
"let g:DoxygenToolkit_blockHeader          = "-------------------------------------------------------------------------------- "
"let g:DoxygenToolkit_blockFooter          = "-------------------------------------------------------------------------------- "
let g:DoxygenToolkit_authorName           = "linlin"
let g:DoxygenToolkit_licenseTag           = "My onw license"
" }}}
" }}}

"# 对 Vim 自带设置的更改 {{{
"## option : set {{{
"--------------------------------------------------------------------------------

"colorscheme murphy
" 使用vimscript进行插入的时候，tab会成为8个空格的，所以不要开启的好
               " 自动跟紧上一行的缩进
" autoload-plugin
"packloadall          " 加载所有插件
"silent! helptags ALL " 为所有插件加载帮助文档
"noh                     "清楚高亮显示
filetype plugin on
filetype indent on   " 根据文件类型自动缩进
filetype on
"set showtabline=1
"set guioptions-=T
"set guioptions-=m
"set guifont=Lucida_Console:h18
"set guifont=Courier_New:b:h16
"set completeopt=menu,menuone,noselect
"set tags+=D:/Qt/6.5.0/Src/tags
set tags+=~/vimfiles/tags/tags
set tags+=D:/user/code/practice/qt/tdesktop/tags
"set statusline=[%n]%1*%F%=%0*%2*%l,%c\ %p%%%0*\|ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\    
"set statusline=[%n]\ %#HIComment%F%=\ \|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%B%{((&fenc==\"\")?\"\":\"\ \|\ \\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\     " 没有效果
"set statusline=[%n]\ %f%m%r%h\ \|\ \ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\
"set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurrentDir()}\ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\\".&fenc)}\ \|\ \%{$USER}\ @\ %{hostname()}\
"set textwidth=80       " 限制一行的长度，不错的功能
"set backspace=2         " 修正终端上的退格键 Backspace 的行为
"set softtabstop=4
"set relativenumber     "相对行号
"set paste                      " 开启这个选项，复制进来的文本的换行符就不会乱
"set cindent                        " C 语言的缩进
        ""setlocal nomodifiable
        "setlocal nobuflisted
        "setlocal noswapfile
        "setlocal bufhidden=hide
        "setlocal buftype=nofile
        "setlocal noreadonly
set runtimepath+="D:\\Programs\\Python\\Python311\python311.dll"
set guifont=AnonymicePro_Nerd_Font_Mono:h16
set dictionary+=$linp/vim/dict/c.txt
set noswapfile
set nobackup
set noundofile
set virtualedit=all "详细信息去看帮助文档
set tags+=D:/Qt/Tools/mingw1120_64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/tags,$lin/libraries/jsoncpp/tags,$lin/libraries/include/lin/tags
set scrolloff=5     " vertical scrolling the cursor distance with bottom
set t_Co=256        " 开启 256 色
set fileencodings=utf-8,gbk
set foldlevel=3
set foldmethod=marker
set laststatus=2
set backspace=3
set nowrap
set sidescroll=10       " 自动的滚动文本，当移动的文本没有显示时
set shiftwidth=4        " 用于自动缩进的空格数量
set expandtab           " 将制表符 Tab 展开为空格，这对于 Python 尤其有用
set tabstop=4           " tab 的空格数量
set hlsearch            "高亮‘/’搜索到的匹配项
set  number              " 显示行号
set mouse=a          " 开启鼠标，默认是不能使用鼠标的
set autoindent " 开启自动缩进
set syntax=on       " 开启语法高亮
"set iminsert=2     " 在 gvim 中存在很大的问题——我使用的是 rime 的郑码，进入
"insert mode 会导致输入法变为郑码，但我想用的是英文，因为，我用 vim
"是为了写代码。使用这个选项，不如直接使用 windows 的输入切换方式。
"}}} option

"## mapping : map {{{
"--------------------------------------------------------------------------------

"nnoremap <F5> :!start C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -noe -c "&{Import-Module """C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"""; Enter-VsDevShell 09c32363}"<CR>
nnoremap <F2> :NERDTreeToggle<CR>
"nnoremap <F2> :Vexplore<CR>
nnoremap <F3> :tabnew<CR>
"inoremap<F4> <C-O>:popup File<CR>
nnoremap <F7> :w<CR>
nnoremap <F6> :call me#Compile()<CR>
nnoremap <F8> :wa<CR>
inoremap <F8> <C-R>=ListMonths()<CR>

nnoremap <F8> :w<CR>
nnoremap <F9> :Tagbar<CR>
nnoremap <F10> :wqa<CR>
nnoremap <leader>x a/*-*/<esc>
xnoremap <Leader>g :Goyo<CR>
xnoremap ga <Plug>(EasyAlign)
nnoremap ga <Plug>(EasyAlign)
vnoremap <Enter> <Plug>(EasyAlign)
nnoremap gs :call me#SwitchToSource()<CR>

" 要求保持光标位置不变 # 自定义函数
"noremap cx Vyp$ 
noremap cx :call CopyLine()<CR>

nnoremap <Space> <C-d>
nnoremap <M-w> <C-w>
nnoremap <LEADER>z ZZ
nnoremap <LEADER>v :Goyo<CR>
nnoremap <LEADER>t <c-w>T
nnoremap <LEADER>sc :!start cmd<CR>
nnoremap <LEADER>o  :tabnew $MYVIMRC<CR>
nnoremap <LEADER>ms :set foldmethod=syntax<CR>
nnoremap <LEADER>mr :set nornu<CR>
nnoremap <LEADER>mo :browse oldfiles<CR>
"nnoremap <LEADER>mm 
nnoremap <LEADER>md :tabnew $HOME/vimfiles/pack/MyVim<CR>
nnoremap <LEADER>i  :call me#CreateImplement()<CR>
nnoremap <LEADER>e  :call me#GenerateDefine()<CR>
nnoremap <LEADER>cd :cd ~/code/cpp/basic<CR>
"nnoremap <LEADER> <Plug>(easymotion-prefix)
nnoremap <c-q> :
"nnoremap <c-v> <c-q> "与终端中的快捷键冲突
nnoremap <C-n> :bel vnew<cr>
nnoremap <C-b> :call me#Compile()<CR>
map <Leader> <Plug>(easymotion-prefix)
"nnoremap <c-s> :w<cr>
"inoremap <c-s> <esc>:w<cr>
"inoremap <C-L> <C-X><C-L>
"inoremap <C-D> <C-X><C-D>
"inoremap <C-F> <C-X><C-F>
"inoremap <C-]> <C-X><C-]>
nnoremap <c-j> <Plug>(easymotion-w)
nnoremap <c-k> <Plug>(easymotion-b)
nnoremap <c-;> <Plug>(easymotion-bd-f)
inoremap <c-;> <Esc><Plug>(easymotion-bd-f)
inoremap <c-q> <Esc>:
inoremap <silent><expr> <Tab> coc#pum#confirm()
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"nnoremap <LEADER>mn :set nu<CR>
"nnoremap <LEADER>md :tabnew $HOME/AppData/Local/nvim/pack/plugins/start/me<CR>
"inoremap <S-Alt> <Esc>:w!<cr>
nnoremap <LEADER>d :call append(line('.'), strftime('%c'))<CR>
"2024年01月13日
"使用 window id 跳转，会出导致 cpp 文件被删除！需要改进！
"通过命令行将文件路径传给另一个程序，它负责编译并运行这个文件。
"这个程序就用 cpp 与 qt来写。
"1.通过命令行调用；
"2.在命令行中执行命令并得到结果；
"3.将结果显示在程序中。

"不好！那就这样！用一个接受文件路径的脚本来完成编译运行的操作。
"1. 设置一个变量
"2. 使用变量和脚本文件来完成编译运行。

"利用 powershell 的启动参数来简化自己的操作
"powershell -help

"colorscheme zaitabsu
colorscheme elflord
"colorscheme sorbet
"colorscheme default

" gaip=
"cd $lin/cpp/basic

" ~/.vim/pack/plugins/start/vim-easy-align/doc
" vipga=     使用等号进行对齐
" v     visual-select
" i     inner
" p     Paragraph
" ga    开始 EasyAlign 命令
" =     依据等号进行对齐
" }}} map

"## autocmd : au {{{
"--------------------------------------------------------------------------------
au! BufNewFile *.cpp,*.h,*.hpp setlocal foldmethod=syntax
au! BufRead *.cpp,*.h,*.hpp setlocal foldmethod=syntax
au! BufRead *.ixx set filetype=cpp
" }}} autocmd

"## variable : let {{{
"--------------------------------------------------------------------------------
let mapleader = "\\"
let g:limelight_priority = -1
let g:limelight_eop = '\ze\n^\s'
let g:limelight_bop = '^\s'
let g:limelight_paragraph_span = 1
let g:limelight_default_coefficient = 0.7
let g:limelight_conceal_guifg = '#777777'
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_ctermfg = 'gray'
if has('win32')
    let $mycfg="~/vimfiles/pack/MyVim/start"
    let $mytmp="~/vimfiles/tmp"
    let $myinclude="D:\\user\\code\\libraries\\include"
else
    let $mycfg="~/.vim/pack/MyVim/start"
    let $mytmp="~/.vim/tmp"
endif
let g:rainbow_active=1
"}}} variable

"## filetype : cpp {{{
"--------------------------------------------------------------------------------
"}}}

"## menu {{{
" --------------------------------------------------------------------------------
" insert mode menu
amenu ToolBar.BuiltIn21 :call me#Compile()<CR>
amenu ToolBar.BuiltIn22 :!start subl.exe %<CR>
" }}} menu

"## abbreviations {{{
" --------------------------------------------------------------------------------
iab ce std::cout <<  << std::endl;<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left> 
iab ff for(int i = 0; i < n; ++i)<CR>{<CR><SPACE><SPACE><SPACE><SPACE>
iab rr std::random_device rd;<CR>std::uniform_int_distribution dist(0, 10);
 
"}}} abbr

"## python {{{
"--------------------------------------------------------------------------------
if &filetype == "python"
    set foldmethod=indent
endif
"}}} python

"## limelight {{{
"----------------------------------------
" 问题: unsupported color scheme. g:limelight_conceal_ctermfg required
" 解决:https://github.com/junegunn/limelight.vim#options
" Color name (:help cterm-colors) or ANSI code

" Color name (:help gui-colors) or RGB color

" Default: 0.5

" Number of preceding/following paragraphs to include (default: 0)

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch

" Goyo
"----------------------------------------
"Goyo与Limelight聚和
"}}}
" }}}

"# 自定义的设置、函数 {{{

"## 重复行而保持光标位置不变 {{{
function! CopyLine()
    let l:old_cursor = getcursorcharpos()
    execute "normal vYp"
    call setcursorcharpos(l:old_cursor[1]+1, l:old_cursor[2])
endfunction
"}}}

"## 补全 complete {{{
"thesaurus 辞典补全，将一个指定的文件作为数据来源
set dict+=~\\vimfiles\\complete\\cpp-keyword.txt
set dict+=~\\vimfiles\complete\\cpp-std-header.txt
"}}}

"## my plugin {{{
"--------------------------------------------------------------------------------
call linlin_popup_menu#AddMenuItem('t', "查看标签行", 'execute :tabs')
call linlin_popup_menu#AddMenuItem('g', "Goyo", "execute Goyo")
"call linlin_popup_menu#AddMenuItem("复制", 'execute normal gv"+y')
"存在popup窗口不能关闭的问题
call linlin_popup_menu#AddMenuItem('p', "粘贴", 'execute normal "+p')
"call linlin_popup_menu#AddMenuItem('c', "进入 C++ basic 目录", 'execute cd ~/code/cpp/basic')
call linlin_popup_menu#AddMenuItem('w', "开启换行", 'execute set wrap')
call linlin_popup_menu#AddMenuItem('x', "编辑我的插件", 'execute tabnew ~/vimfiles/pack/MyVim/start')
"call linlin_popup_menu#AddMenuItem("打开我的插件目录", 'execute cd ~/code/cpp/basic')
"查看当前信息：
"1. pwd
"2. 历史文件
"3. 上次使用时间
"4. 本次使用持续时间

command -nargs=1 Ifndef call Ifndef()
call linlin_popup_menu#AddMenuItem("i", "插入预防宏", 'execute call Ifndef()')
call linlin_popup_menu#AddMenuItem("k", "查看窗口布局", 'execute echo winlayout()')

"### 使窗口位于中间，并打开顶部打开一个预览窗口
function! PlaceholderWindow()
    "wincmd T
    let winid = win_getid()
    vnew
    vertical resize 55
    call win_gotoid(winid)
    split
    resize 5
    call win_gotoid(winid)
endfunction

call linlin_popup_menu#AddMenuItem("l", "在左侧添加一个宽度为 60 的窗口", 'execute call PlaceholderWindow()')

function! SaveToRegister()

endfunction



"if has('gui_running')
  "set imactivatekey=C-space  
  "inoremap <ESC> <ESC>:set iminsert=2<CR>
"endif

"~/vimfiles/pack/MyVim/start
"~/vimfiles/pack/MyVim/record.md

""" C++ 插入预防宏
function! Ifndef()
    let name = input("请输入宏名：")
    if empty(name) == 1
        return
    endif
        let macro_name = toupper(name) .. "_H_"
        let content = [
                    \ "#ifndef " .. macro_name, 
                    \ "#define " .. macro_name, 
                    \]
        call append(line("0"), content)
        call append(line("$"), "#endif // " .. macro_name)
endfunction

""" 查看中文月份
func! ListMonths()
    "call complete(col('.'), ['January', 'February', 'March',
                "\ 'April', 'May', 'June', 'July', 'August', 'September',
                "\ 'October', 'November', 'December'])
    let cpp_complete = [
                \ "std::cout << << std::endl;", 
                \ "int main() { f(); }", 
                \]
    call complete(col('.'), cpp_complete)
    "实现光标的移动，在补全使用特殊的参数，在选择后，解析结果，然后移动光标
    return ''
endfunc
"}}} plugin

"## Register Record {{{

" 在 vimfiles 中创建目录 register,
" 在这个目录中保存寄存器中的信息——给文件命名加注释。
" 需要使用时，直接加载保存的文件。

"j0wvf;hyPa << 
"}}}

"## Self Custom Symbol {{{
"--------------------------------------------------------------------------------
"┌─────────────┐
"│             │  
"└─────────────┘

    "/zbf": [ "┌─────────────┐", "│             │", "├─────────────┤", "└─────────────┘", "┌", "┬", "┐", "┌", "─", "┐", "┍", "┯", "┑", "╔", "╦", "╗", "├", "┼", "┤", "│", "┼", "│", "┝", "┿", "┥", "╠", "╬", "╣", "└", "┴", "┘", "└", "─", "┘", "┕", "┷", "┙", "╚", "╩", "╝", "┏", "┳", "┓", "┏", "━", "┓", "┎", "┰", "┒", "╔", "═", "╗", "┣", "╋", "┫", "┃", "╋", "┃", "┠", "╂", "┨", "║", "╬", "║", "┗", "┻", "┛", "┗", "━", "┛", "┖", "┸", "┚", "╚", "═", "╝", "╓", "╥", "╖", "╒", "╤", "╕", "┏", "┱", "┐", "┌", "┲", "┓", "╟", "╫", "╢", "╞", "╪", "╡", "┡", "╃", "┤", "├", "╄", "┩", "╙", "╨", "╜", "╘", "╧", "╛", "└", "┴", "┘", "└", "┴", "┘", "┌", "┬", "┐", "┏", "┳", "┓", "╭", "─", "╮", "╱", "─", "╲", "┟", "╁", "┧", "┞", "╀", "┦", "│", "╳", "│", "│", "┼", "│", "┗", "┻", "┛", "└", "┴", "┘", "╰", "─", "╯", "╲", "─", "╱", "┄", "┈", "┉", "┅", "┇", "┋", "┊", "┆" ] 
"}}}

"## Changed dir {{{

""" \brief 将 vim 的命令行目录改变为调用这个函数的文件所在的目录
function ChangedDir()
    let l:file_dir = expand("#:h")
    call chdir(l:file_dir)
endfunction

command -nargs=0 CD call Ifndef()
"}}}

"## note {{{
"--------------------------------------------------------------------------------

"### platform

"if has('win32')
    "echo "win32"
"elseif has('unix')
    "echo "unix"
"elseif has ('mac')
    "echo "mac"
"else
    "echo "else"
"endif


"### 对插件中的函数创建快捷键

" 命令行命令
" 快捷键映射

"### 得到当前时间

"nnoremap <LEADER>d :call append(line('.'), strftime('%c'))<CR>

"### vim 时间相关的函数

"使用: `:h strftime` 查看相应的介绍

"- strftime
"- localtime
"    - 从 1970 年 1 月开始的秒数
"- getftime
"    - 得到指定文件的最后修改时间，从 1970 年 1 月开始的秒数
"- strptime
"    - 将指定格的字符串时间转换为 Unix 时间戳

"### { { { } } }
"这是 vim 的折叠标记

"}}} note

" }}}
